/*********************************************************************
This is a library for Monochrome Nokia 5110 LCD Displays
*********************************************************************/

#include <avr/pgmspace.h>
#include "Arduino.h"
#include <util/delay.h>
#include <stdlib.h>
#include <Fridge_GFX.h>
#include "Fridge_PCD8544.h"

#ifndef _BV
  #define _BV(x) (1 << (x))
#endif

#ifndef _BV
  #define _BV(bit) (1<<(bit))
#endif


// the memory buffer for the LCD
uint8_t pcd8544_buffer[LCDWIDTH * LCDHEIGHT / 8] = {
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x88,0xf8,0xf0,0xe0,0xc0,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xf0,0xf8,0xd8,0x84,0x04,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0e,0x1c,0x1c,0x3c,0x3e,0x3f,0x3f,0x3f,0x7f,0xff,0xff,0xfc,0xf8,0x70,0x20,0x80,0x00,0x40,0xe0,0xe0,0xe0,0xf0,0xf0,0xf0,0xf0
,0xf0,0xe0,0xe0,0xe0,0x80,0x80,0x00,0x30,0xf8,0xfc,0xfe,0xff,0x7f,0x3f,0x3f,0x3f,0x3e,0x3e,0x3c,0x0c,0x0e,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0xf0,0xfc,0x7e,0x3f,0x3f,0x1f,0x1e,0x3c,0x3d,0xfb,0xf3,0xe7,0xef,0x0f,0x1f,0x1f,0x1f,0x3f,0x3f,0x7e,0xfc,0xf0,0x01,0x01,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x1f,0xff,0xf8,0xe0,0xe0
,0xf8,0xf8,0xfc,0xfc,0x3f,0x0f,0x0f,0x3f,0xf8,0xf0,0xe0,0xe0,0xf0,0xf0,0xe0,0x6f,0x0f,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0xc0,0x70,0x78,0x38,0x78,0xf8,0xf8,0xf8,0xfc,0xfe,0xff,0xff,0x3f,0x1c,0x18,0x00,0x03,0x1f,0x3f,0x7f,0x7f,0x3f,0x0f,0x3e,0x7e,0x3f,0x0f,0x3f,0x7f,0x7f
,0x3f,0x1f,0x01,0x00,0x18,0x3e,0x7f,0xff,0xfe,0xfc,0xf8,0xf8,0x78,0x78,0x18,0x38,0x70,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x37,0x3f,0x1f
,0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x1f,0x1f,0x3b,0x30
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
};

static void updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax) {
}

Fridge_PCD8544::Fridge_PCD8544(int8_t SCLK, int8_t DIN, int8_t DC, int8_t RST) : Fridge_GFX(LCDWIDTH, LCDHEIGHT) {
  _din = DIN;
  _sclk = SCLK;
  _dc = DC;
  _rst = RST;
}


void Fridge_PCD8544::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
    return;

  int16_t t;
  switch(rotation){
    case 1:
      t = x;
      x = y;
      y =  LCDHEIGHT - 1 - t;
      break;
    case 2:
      x = LCDWIDTH - 1 - x;
      y = LCDHEIGHT - 1 - y;
      break;
    case 3:
      t = x;
      x = LCDWIDTH - 1 - y;
      y = t;
      break;
  }

  if ((x < 0) || (x >= LCDWIDTH) || (y < 0) || (y >= LCDHEIGHT))
    return;

  if (color) 
    pcd8544_buffer[x+ (y/8)*LCDWIDTH] |= _BV(y%8);  
  else
    pcd8544_buffer[x+ (y/8)*LCDWIDTH] &= ~_BV(y%8); 

  updateBoundingBox(x,y,x,y);
}

void Fridge_PCD8544::begin(uint8_t contrast) {
  pinMode(_din, OUTPUT);
  pinMode(_sclk, OUTPUT);
  clkport     = portOutputRegister(digitalPinToPort(_sclk));
  clkpinmask  = digitalPinToBitMask(_sclk);
  mosiport    = portOutputRegister(digitalPinToPort(_din));
  mosipinmask = digitalPinToBitMask(_din);
  pinMode(_dc, OUTPUT);
  pinMode(_rst, OUTPUT);
  digitalWrite(_rst, LOW);
  delay(100);
  digitalWrite(_rst, HIGH);
  command(0x21);					// Extended instructions
  command(0x10);					// Set bias (from 0x10 to 0x17)
  command(0x80 | contrast); 				// Set VOP (contrast) (from 0 to 127)
  command(0x04);					// Set temp coef.(from 0x04 to 0x07)
  command(0x20);					// Normal instructions
  command(0x0C);					//PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL); // Normal display
  updateBoundingBox(0, 0, LCDWIDTH-1, LCDHEIGHT-1);
  display();
}

inline void Fridge_PCD8544::spiWrite(uint8_t d) {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
      *clkport &= ~clkpinmask;
      if(d & bit) *mosiport |=  mosipinmask;
      else        *mosiport &= ~mosipinmask;
      *clkport |=  clkpinmask;
    }
}

void Fridge_PCD8544::command(uint8_t c) {
  digitalWrite(_dc, LOW);
  spiWrite(c);
}

void Fridge_PCD8544::data(uint8_t c) {
  digitalWrite(_dc, HIGH);
  spiWrite(c);
}

void Fridge_PCD8544::setContrast(uint8_t val) {
  command(0x21);					// Extended instructions
  command(0x80 | val); 					// Set VOP (contrast) (from 0 to 127)
  command(0x20);					// Normal instructions
}

void Fridge_PCD8544::display(void) {
  uint8_t col, maxcol, p;
  
  for(p = 0; p < 6; p++) {
    command(PCD8544_SETYADDR | p);
    col = 0;
    maxcol = LCDWIDTH-1;
    command(PCD8544_SETXADDR | col);
    digitalWrite(_dc, HIGH);
    for(; col <= maxcol; col++) {
      spiWrite(pcd8544_buffer[(LCDWIDTH*p)+col]);
    }
  }
  command(PCD8544_SETYADDR ); 
}

void Fridge_PCD8544::clearDisplay(void) {
  memset(pcd8544_buffer, 0, LCDWIDTH*LCDHEIGHT/8);
  updateBoundingBox(0, 0, LCDWIDTH-1, LCDHEIGHT-1);
  cursor_y = cursor_x = 0;
}

